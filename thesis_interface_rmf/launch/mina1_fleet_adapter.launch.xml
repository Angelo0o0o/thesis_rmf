<?xml version='1.0' ?>

<launch>
  <arg name="use_sim_time" default="false"/>
  <arg name="enable_experimental_lift_watchdog" default="false" description="experimental lift watchdog"/>

  <!-- Common launch -->
  <include file="$(find-pkg-share rmf_demos)/common.launch.xml">
    <arg name="use_sim_time" value="$(var use_sim_time)"/>
    <arg name="viz_config_file" value ="$(find-pkg-share rmf_demos)/include/hotel/hotel.rviz"/>
    <arg name="config_file" value="$(find-pkg-share thesis_interface_rmf)/maps/mina1/mina_with_stones_nav.building.yaml"/>
    <arg name="dashboard_config_file" value="$(find-pkg-share rmf_demos_dashboard_resources)/hotel/dashboard_config.json"/>
  </include>


  <!-- Experimental Lift watchdog service launch, default disable -->
  <group if="$(var enable_experimental_lift_watchdog)" scoped="false">
    <node pkg="rmf_fleet_adapter"
          exec="experimental_lift_watchdog"
          name="experimental_lift_watchdog"
          output="both" />
    <set_env name="EXPT_LIFT_WATCHDOG_SRV" value="experimental_lift_watchdog"/>
  </group>
  <group unless="$(var enable_experimental_lift_watchdog)" scoped="false">
    <set_env name="EXPT_LIFT_WATCHDOG_SRV" value=""/>
  </group>

  
  <!-- burger fleet adapter -->
  <group>
    <include file="$(find-pkg-share rmf_demos_fleet_adapter)/launch/fleet_adapter.launch.xml">
      <arg name="use_sim_time" value="$(var use_sim_time)"/>
      <arg name="nav_graph_file" value="$(find-pkg-share thesis_interface_rmf)/maps/mina1/0.yaml" />
      <arg name="config_file" value="$(find-pkg-share thesis_interface_rmf)/config/burger_config.yaml"/>
    </include>
  </group>

  <!-- waffle fleet adapter -->
  <group>
    <include file="$(find-pkg-share rmf_demos_fleet_adapter)/launch/fleet_adapter.launch.xml">
      <arg name="use_sim_time" value="$(var use_sim_time)"/>
      <arg name="nav_graph_file" value="$(find-pkg-share thesis_interface_rmf)/maps/mina1/0.yaml" />
      <arg name="config_file" value="$(find-pkg-share thesis_interface_rmf)/config/waffle_config.yaml"/>
    </include>
  </group>


  <!-- Mock Docker Node, to provide CleanerBotA Fleet Adapter fix cleaning task paths -->
  <group>
    <let name="docking_config_file" value="$(find-pkg-share rmf_demos_tasks)/hotel_cleaner_config.yaml"/>
    <node pkg="rmf_demos_tasks" exec="mock_docker" args="-c $(var docking_config_file)">
      <param name="use_sim_time" value="$(var use_sim_time)"/>
    </node>
  </group>
</launch>
